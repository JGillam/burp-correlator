{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Paramalyzer Overview \u00b6 Paramalyzer is a Burp Suite extension authored by Jason Gillam of Secure Ideas . The source code is available on github . Important: You must have Burp Suite installed in order to use this tool! What does it do? \u00b6 The purpose of this extension is to improve efficiency of manual parameter analysis for web penetration tests of either complex or numerous applications. This can assist in tasks such as identifying sensitive data, identifying hash algorithms, decoding parameters, and determining which parameters are reflected in the response. As of version 2.0, this extension also helps specifically with certain aspects of session cookies, which can help a penetration tester find certain types of authentication and authorization flaws. Installation \u00b6 Paramalyzer is available in the Burp Suite BApp Store; however, the version in the store may be behind the latest release. You can find the latest release as a downloadable .jar file under GitHub Paramalyzer releases . Download it and then in the Burp Extender tab, press the Add button, find and select the downloaded .jar file. The resulting screen should look something like the following screenshot: Notice the addition of the Paramalyzer tab on the far right of the main tab pane. Basic Usage Tips \u00b6 When using Paramalyzer, it is important to understand that you must start with good baseline data. The following tips will help: Paramalyzer analyzes your proxy history. Therefore, you must manually visit all the functionality in the application in your browser while pointed at your Burp Suite proxy. This is the best-practice for manual penetration tests anyway, as you must understand how the application works in order accurately identify vulnerabilities. Avoid sending attack traffic while gathering baseline data. Doing so will pollute your logs and may yield confusing analysis output. Map out the entire application from both an unauthenticated and authenticated user perspective. Log in as a second user account, if possible, and revisit any sensitive functionality to capture a second set of cookies. Log out and back in with the same user account. Capture proxy history for all user functions (i.e. login, logout, forgot password, registration, change password, change profile, etc...) If applicable, visit the site in different roles (e.g. regular use, admin user). The goal of all of this is to produce a solid baseline of the application's inputs for Paramalyzer to process. Once you have completed the basic mapping, you can then move on to using Paramalyzer's tools, found on the main set of tabs in the extension: Parameters : Analysis of in-scope parameters. Secrets : Look for sensitive information leakage. Cookies : High-level analysis of cookies found in the proxy history. Sessions : In-depth analysis of session cookies and headers for a given request.","title":"Paramalyzer Overview"},{"location":"#paramalyzer-overview","text":"Paramalyzer is a Burp Suite extension authored by Jason Gillam of Secure Ideas . The source code is available on github . Important: You must have Burp Suite installed in order to use this tool!","title":"Paramalyzer Overview"},{"location":"#what-does-it-do","text":"The purpose of this extension is to improve efficiency of manual parameter analysis for web penetration tests of either complex or numerous applications. This can assist in tasks such as identifying sensitive data, identifying hash algorithms, decoding parameters, and determining which parameters are reflected in the response. As of version 2.0, this extension also helps specifically with certain aspects of session cookies, which can help a penetration tester find certain types of authentication and authorization flaws.","title":"What does it do?"},{"location":"#installation","text":"Paramalyzer is available in the Burp Suite BApp Store; however, the version in the store may be behind the latest release. You can find the latest release as a downloadable .jar file under GitHub Paramalyzer releases . Download it and then in the Burp Extender tab, press the Add button, find and select the downloaded .jar file. The resulting screen should look something like the following screenshot: Notice the addition of the Paramalyzer tab on the far right of the main tab pane.","title":"Installation"},{"location":"#basic-usage-tips","text":"When using Paramalyzer, it is important to understand that you must start with good baseline data. The following tips will help: Paramalyzer analyzes your proxy history. Therefore, you must manually visit all the functionality in the application in your browser while pointed at your Burp Suite proxy. This is the best-practice for manual penetration tests anyway, as you must understand how the application works in order accurately identify vulnerabilities. Avoid sending attack traffic while gathering baseline data. Doing so will pollute your logs and may yield confusing analysis output. Map out the entire application from both an unauthenticated and authenticated user perspective. Log in as a second user account, if possible, and revisit any sensitive functionality to capture a second set of cookies. Log out and back in with the same user account. Capture proxy history for all user functions (i.e. login, logout, forgot password, registration, change password, change profile, etc...) If applicable, visit the site in different roles (e.g. regular use, admin user). The goal of all of this is to produce a solid baseline of the application's inputs for Paramalyzer to process. Once you have completed the basic mapping, you can then move on to using Paramalyzer's tools, found on the main set of tabs in the extension: Parameters : Analysis of in-scope parameters. Secrets : Look for sensitive information leakage. Cookies : High-level analysis of cookies found in the proxy history. Sessions : In-depth analysis of session cookies and headers for a given request.","title":"Basic Usage Tips"},{"location":"cookie-analysis/","text":"Cookie Analysis \u00b6 The cookie analysis tab provides a table of cookies found in the proxy history. This table can be used to quickly determine which cookies where set with unsecure settings. The following screenshot is an example: View Full Size This table contains the following fields: Name : The name of the cookie Count : A count of the number of times the cookie was set. HttpOnly Flag : Indicator of how frequently the HttpOnly flag was set for this cookie. Secure Flag : Indicator of how frequently the Secure flag was set for this cookie. Type : Is this a Session cookie or a Persistent cookie? Persistent cookies have an expiration or max-age value set, and will be saved to disk. Session cookies only stay in memory until the browser is closed. Domains : A list of domains for which this cookie was set. Look for cases where a cookie is overly-scoped such that it works across all subdomains. Paths : A list of paths for which this cookie was set. Exporting \u00b6 There is a Save button at the bottom of the tab that can be used to export this entire table as a csv file.","title":"Cookie Analysis"},{"location":"cookie-analysis/#cookie-analysis","text":"The cookie analysis tab provides a table of cookies found in the proxy history. This table can be used to quickly determine which cookies where set with unsecure settings. The following screenshot is an example: View Full Size This table contains the following fields: Name : The name of the cookie Count : A count of the number of times the cookie was set. HttpOnly Flag : Indicator of how frequently the HttpOnly flag was set for this cookie. Secure Flag : Indicator of how frequently the Secure flag was set for this cookie. Type : Is this a Session cookie or a Persistent cookie? Persistent cookies have an expiration or max-age value set, and will be saved to disk. Session cookies only stay in memory until the browser is closed. Domains : A list of domains for which this cookie was set. Look for cases where a cookie is overly-scoped such that it works across all subdomains. Paths : A list of paths for which this cookie was set.","title":"Cookie Analysis"},{"location":"cookie-analysis/#exporting","text":"There is a Save button at the bottom of the tab that can be used to export this entire table as a csv file.","title":"Exporting"},{"location":"parameter-analysis/","text":"Parameter Analysis \u00b6 Usage \u00b6 IMPORTANT: Set your Scope on the Target-->Scope tab. Paramalyzer only analyzes URLs that are set as in-scope. Once you have mapped out your application you can go to the Paramalyzer tab and proceed. If you have items that you know should be ignored from this analysis, then make sure they are listed in the Ignore These box. VIEWSTATE parameters are listed there for you by default. IMPORTANT: Paramalyzer examines your proxy history to understand the application's parameters. It will get confused by attack payloads in the proxy history, so it is best to run Paramalyzer after mapping the app but before you start injecting attack payloads. Then press the Analyze button as seen in the image below: View Full Size Analysis may take several seconds when covering a long proxy history. Paramalyzer will make its best effort to identify each request parameter present, including: URL (i.e. classic ?key1=value1&key2=value2) Cookies Classic POST body parameters JSON XML The specific rules used to find parameters are determined by Burp Suite. Once the analysis is complete, the screen should look something like the following example: View Full Size Workflow \u00b6 The usual workflow, using the above screenshot as a reference, is as follows: 1 - Main Table \u00b6 The fields in this table are as follows: Name : The name of the parameter. Type : The type of parameter. Requests : A count of the number of analyzed requests containing this parameter (includes duplicates). Unique URLs : A count of the number of different URLs containing this parameter. Useful for finding parameters that are passed around a lot vs. just used sparingly. Unique Values : A count of the number of unique values for the given parameter. Useful for finding parameters that never change or that change frequently. Format : Paramalyzer makes its best effort to determine the real format of the parameter. This includes recursive decoding as needed. See Supported Formats for a list of analyzed formats. Reflect % : What percentage of the parameters were found reflected in the response? This is helpful for finding potential XSS candidates. Secret : This editable field designates this parameter as a secret. Paramalyzer will attempt to guess some of these for you. More on secrets later. Decodable : If the parameter value appears to be encoded in a recognized format (e.g. URL-encoded, base64-encoded) Example Value : Display an example value for this parameter. By default this will show the decoded version of the value if it is encoded. Look through the table for interesting values. This will depend on the application but the types of things you are looking for will include: Parameters that get consistently reflected could potentially be used for XSS or HTML-injection. Parameters containing secrets, like sessions or user information could be exposed. Hashes may have originated with interesting or sensitive information. Consider which parameters are used to control business logic / flow 2 - Values List \u00b6 When you click on a parameter in the main table, its list of unique values is displayed in the bottom-left corner. By right-clicking any value in the list you will see the following context menu: Copy List to Clipboard : Sometimes useful when you need to pull a list for a report or as input into another tool such as Intruder . 3 - What is it? \u00b6 When you select an item from the Values List, Paramalyzer will explain how it derived the Format of the value. In the example screenshot it is telling us that it found this value to be 40 hexadecimal characters, which is consistent with a SHA-1 value. If Paramalyzer was able to decode the value, then each decoding step will be explained here as well. 4 - Req / Resp \u00b6 The request and response containing the selected value will be available here. The value will by highlighted in pink. By right-clicking anywhere in the request box you will have the option to send it directly to Repeater . 5 - Highlight / Comment \u00b6 You can select a highlight color and add a comment below the message box. These settings affect this message in the proxy history tab, which can help you find the request or response later. 6 - Export \u00b6 The parameter table may be exported to a parsable format (semicolon-delimited). 7 - Clear \u00b6 In the event that you add more information to the proxy history or change your application scope, you can use the Clear button to reset Paramalyzer and make it ready to Analyze again. Supported Formats \u00b6 Paramalyzer can recognize several different formats of data, as follows: Numeric Text MD5 SHA-1 SHA-224 SHA-256 SHA-512 Base64 Encoded URL Encoded Big IP Format Hex String Email Address SSN Credit Card HTML Fragment JSON Object PHP Serialized String Base 62 Encoded Text","title":"Parameter Analysis"},{"location":"parameter-analysis/#parameter-analysis","text":"","title":"Parameter Analysis"},{"location":"parameter-analysis/#usage","text":"IMPORTANT: Set your Scope on the Target-->Scope tab. Paramalyzer only analyzes URLs that are set as in-scope. Once you have mapped out your application you can go to the Paramalyzer tab and proceed. If you have items that you know should be ignored from this analysis, then make sure they are listed in the Ignore These box. VIEWSTATE parameters are listed there for you by default. IMPORTANT: Paramalyzer examines your proxy history to understand the application's parameters. It will get confused by attack payloads in the proxy history, so it is best to run Paramalyzer after mapping the app but before you start injecting attack payloads. Then press the Analyze button as seen in the image below: View Full Size Analysis may take several seconds when covering a long proxy history. Paramalyzer will make its best effort to identify each request parameter present, including: URL (i.e. classic ?key1=value1&key2=value2) Cookies Classic POST body parameters JSON XML The specific rules used to find parameters are determined by Burp Suite. Once the analysis is complete, the screen should look something like the following example: View Full Size","title":"Usage"},{"location":"parameter-analysis/#workflow","text":"The usual workflow, using the above screenshot as a reference, is as follows:","title":"Workflow"},{"location":"parameter-analysis/#1-main-table","text":"The fields in this table are as follows: Name : The name of the parameter. Type : The type of parameter. Requests : A count of the number of analyzed requests containing this parameter (includes duplicates). Unique URLs : A count of the number of different URLs containing this parameter. Useful for finding parameters that are passed around a lot vs. just used sparingly. Unique Values : A count of the number of unique values for the given parameter. Useful for finding parameters that never change or that change frequently. Format : Paramalyzer makes its best effort to determine the real format of the parameter. This includes recursive decoding as needed. See Supported Formats for a list of analyzed formats. Reflect % : What percentage of the parameters were found reflected in the response? This is helpful for finding potential XSS candidates. Secret : This editable field designates this parameter as a secret. Paramalyzer will attempt to guess some of these for you. More on secrets later. Decodable : If the parameter value appears to be encoded in a recognized format (e.g. URL-encoded, base64-encoded) Example Value : Display an example value for this parameter. By default this will show the decoded version of the value if it is encoded. Look through the table for interesting values. This will depend on the application but the types of things you are looking for will include: Parameters that get consistently reflected could potentially be used for XSS or HTML-injection. Parameters containing secrets, like sessions or user information could be exposed. Hashes may have originated with interesting or sensitive information. Consider which parameters are used to control business logic / flow","title":"1 - Main Table"},{"location":"parameter-analysis/#2-values-list","text":"When you click on a parameter in the main table, its list of unique values is displayed in the bottom-left corner. By right-clicking any value in the list you will see the following context menu: Copy List to Clipboard : Sometimes useful when you need to pull a list for a report or as input into another tool such as Intruder .","title":"2 - Values List"},{"location":"parameter-analysis/#3-what-is-it","text":"When you select an item from the Values List, Paramalyzer will explain how it derived the Format of the value. In the example screenshot it is telling us that it found this value to be 40 hexadecimal characters, which is consistent with a SHA-1 value. If Paramalyzer was able to decode the value, then each decoding step will be explained here as well.","title":"3 - What is it?"},{"location":"parameter-analysis/#4-req-resp","text":"The request and response containing the selected value will be available here. The value will by highlighted in pink. By right-clicking anywhere in the request box you will have the option to send it directly to Repeater .","title":"4 - Req / Resp"},{"location":"parameter-analysis/#5-highlight-comment","text":"You can select a highlight color and add a comment below the message box. These settings affect this message in the proxy history tab, which can help you find the request or response later.","title":"5 - Highlight / Comment"},{"location":"parameter-analysis/#6-export","text":"The parameter table may be exported to a parsable format (semicolon-delimited).","title":"6 - Export"},{"location":"parameter-analysis/#7-clear","text":"In the event that you add more information to the proxy history or change your application scope, you can use the Clear button to reset Paramalyzer and make it ready to Analyze again.","title":"7 - Clear"},{"location":"parameter-analysis/#supported-formats","text":"Paramalyzer can recognize several different formats of data, as follows: Numeric Text MD5 SHA-1 SHA-224 SHA-256 SHA-512 Base64 Encoded URL Encoded Big IP Format Hex String Email Address SSN Credit Card HTML Fragment JSON Object PHP Serialized String Base 62 Encoded Text","title":"Supported Formats"},{"location":"secrets-hunter/","text":"Secrets Hunter \u00b6 The purpose of this tool is to leverage the data that has already been collected by paramalyzer to search for the exposure of secrets. In this context, a secret is any type of information that is intended to be kept within the scope of the application (i.e. between the application and the user). Secrets Hunter looks for the following types of exposure: A secret value is found in a url A secret value is found in any out-of-scope request This tool relies heavily on the target scope setting in Burp Suite. Usage \u00b6 On the main parameter table you may have noticed the Secret column. View Full Size Paramalyzer will try to guess secrets for you, but this process works best if you curate that list (the Secret checkboxes are editable). Go through your parameters and check the box for any parameters that you would not want leaked to a third party. Uncheck the box for parameters that don't matter, such as those that only have blank values or perhaps show an index number rather than a sensitive value. Next, take a look at the secrets tab: View Full Size You can follow the numbers in the screenshot to see the general workflow for this tab is as follows: Press the Import Secrets button. This will bring all the secrets over that you selected on the Parameters tab. If you missed some, simply press Clear , fix your list in the Parameters tab, and hit this Import Secrets button again. You can further curate your list by removing anything that doesn't belong here. Searching for secrets can take a while when you have a lot of proxy history, so it is best that this list only be as long as necessary. Check boxes for Hunt Hashed for items that you might expect to be hashed (passwords is an example). This makes the search take longer, as it will search for MD5, SHA1, and SHA256 versions (upper and lowercase) of each secret value. Press the Hunt Secrets! button, and wait for the search to complete. For any secret that lists an issue count more than zero, select it and review the results list. You can select any item on the results list to see where the value was found in the request. Limitations \u00b6 Currently, Secrets Hunter will only search for the first 20 unique values for any given parameter.","title":"Secrets Hunter"},{"location":"secrets-hunter/#secrets-hunter","text":"The purpose of this tool is to leverage the data that has already been collected by paramalyzer to search for the exposure of secrets. In this context, a secret is any type of information that is intended to be kept within the scope of the application (i.e. between the application and the user). Secrets Hunter looks for the following types of exposure: A secret value is found in a url A secret value is found in any out-of-scope request This tool relies heavily on the target scope setting in Burp Suite.","title":"Secrets Hunter"},{"location":"secrets-hunter/#usage","text":"On the main parameter table you may have noticed the Secret column. View Full Size Paramalyzer will try to guess secrets for you, but this process works best if you curate that list (the Secret checkboxes are editable). Go through your parameters and check the box for any parameters that you would not want leaked to a third party. Uncheck the box for parameters that don't matter, such as those that only have blank values or perhaps show an index number rather than a sensitive value. Next, take a look at the secrets tab: View Full Size You can follow the numbers in the screenshot to see the general workflow for this tab is as follows: Press the Import Secrets button. This will bring all the secrets over that you selected on the Parameters tab. If you missed some, simply press Clear , fix your list in the Parameters tab, and hit this Import Secrets button again. You can further curate your list by removing anything that doesn't belong here. Searching for secrets can take a while when you have a lot of proxy history, so it is best that this list only be as long as necessary. Check boxes for Hunt Hashed for items that you might expect to be hashed (passwords is an example). This makes the search take longer, as it will search for MD5, SHA1, and SHA256 versions (upper and lowercase) of each secret value. Press the Hunt Secrets! button, and wait for the search to complete. For any secret that lists an issue count more than zero, select it and review the results list. You can select any item on the results list to see where the value was found in the request.","title":"Usage"},{"location":"secrets-hunter/#limitations","text":"Currently, Secrets Hunter will only search for the first 20 unique values for any given parameter.","title":"Limitations"},{"location":"session-analysis/","text":"Session Analysis \u00b6 The Session Analysis functionality of Paramalyzer will, provided a baseline request, issue a series of test case requests such that one cookie will be omitted from each test case. The goal is to determine which cookies influence the session state. This can be particularly helpful in complex application state scenarios. Send to Paramalyzer \u00b6 To begin, find a request / response pair that already contains all the cookies to be analyzed, which normally means one where a user has already been authenticated. When your right-click, you should see a Send to Paramalyzer option in the context menu as follows: Clicking this option will create a new sub-tab under the Paramalyzer Sessions tab. Session Analysis Tab \u00b6 When the tab is first open you will see the baseline request displayed along the left and a table on the right. At this point it is wise double-check that your baseline request is still valid and producing the proper authenticated response. Session analysis won't work with invalid session cookies. Once you are satisfied that the request is still valid, hit that Analyze button. The table should populate as seen in the following screenshot: View Full Size By reviewing the response codes and returned sizes and comparing them to the baseline, you will often be able to determine which cookies are essential to the application state. *Note: If the request has a Authorization header, a test case will be added for this as well. By right-clicking any of the items in this table you will be presented with one or more of the following options: Send to Repeater : Sends the request to repeater for further testing. Send response to Comparer : Sends the response to comparer. Useful when you want to see what specifically changed between the baseline and a test case. Find Origin Response : Searches through Burp's proxy history for the first occurrence where the specified cookie was set to the value in the baseline request. Find Origin Response \u00b6 If the origin response is found, it will pop-up in a new dialog window as seen below: This window will include both the request and response, and will will function like any other request/response editor inside of Burp, which means right-clicking on these items will provide options to send them to other Burp tools.","title":"Session Analysis"},{"location":"session-analysis/#session-analysis","text":"The Session Analysis functionality of Paramalyzer will, provided a baseline request, issue a series of test case requests such that one cookie will be omitted from each test case. The goal is to determine which cookies influence the session state. This can be particularly helpful in complex application state scenarios.","title":"Session Analysis"},{"location":"session-analysis/#send-to-paramalyzer","text":"To begin, find a request / response pair that already contains all the cookies to be analyzed, which normally means one where a user has already been authenticated. When your right-click, you should see a Send to Paramalyzer option in the context menu as follows: Clicking this option will create a new sub-tab under the Paramalyzer Sessions tab.","title":"Send to Paramalyzer"},{"location":"session-analysis/#session-analysis-tab","text":"When the tab is first open you will see the baseline request displayed along the left and a table on the right. At this point it is wise double-check that your baseline request is still valid and producing the proper authenticated response. Session analysis won't work with invalid session cookies. Once you are satisfied that the request is still valid, hit that Analyze button. The table should populate as seen in the following screenshot: View Full Size By reviewing the response codes and returned sizes and comparing them to the baseline, you will often be able to determine which cookies are essential to the application state. *Note: If the request has a Authorization header, a test case will be added for this as well. By right-clicking any of the items in this table you will be presented with one or more of the following options: Send to Repeater : Sends the request to repeater for further testing. Send response to Comparer : Sends the response to comparer. Useful when you want to see what specifically changed between the baseline and a test case. Find Origin Response : Searches through Burp's proxy history for the first occurrence where the specified cookie was set to the value in the baseline request.","title":"Session Analysis Tab"},{"location":"session-analysis/#find-origin-response","text":"If the origin response is found, it will pop-up in a new dialog window as seen below: This window will include both the request and response, and will will function like any other request/response editor inside of Burp, which means right-clicking on these items will provide options to send them to other Burp tools.","title":"Find Origin Response"}]}